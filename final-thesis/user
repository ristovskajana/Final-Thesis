import pygame
from pygame.locals import *
import random
import json

pygame.init()

clock = pygame.time.Clock()
fps = 60

screen_width = 864
screen_height = 936

screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Flappy Bird')

# LOADING ALL IMAGES
background_img = pygame.image.load('img/bg.png')
ground_img = pygame.image.load('img/ground.png')
button_img = pygame.image.load('img/restart.png')

def draw_text(text, font, color, x, y):
    img = font.render(text, True, color)
    screen.blit(img, (x, y))

def reset_game():
    pipe_group.empty()
    flappy.rect.x = 100
    flappy.rect.y = int(screen_height/2)
    score = 0
    game_data.clear()  # Clear game data when resetting the game
    return score

# GAME VARIABLES
font = pygame.font.SysFont('Bauhaus 93', 60)
# define color
white = (255, 255, 255)
scroll_ground = 0
# every iteration ground moves by 4 pixels
scroll_speed = 4
# not start the game immediately
flying = False
# check for game over
dead = False
# gap in between the pipes
pipe_gap = 170
# how often new pipes spawn 1500 milliseconds
pipe_frequency = 1500
# whenever the game is first initialized
last_pipe = pygame.time.get_ticks() - pipe_frequency
# keep track of score
score = 0
# check if a pipe has been surpassed
pass_pipe = False

# Game data list
game_data = []

class Bird(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        self.index = 0
        self.counter = 0
        for num in range(1, 4):
            bird_img = pygame.image.load(f'img/bird{num}.png')
            self.images.append(bird_img)
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]

        # add gravity
        self.velocity = 0
        self.clicked = False

    def update(self):
        global game_data

        if flying:
            self.velocity += 0.5
            if self.velocity > 8:
                self.velocity = 8
            if self.rect.bottom < 768:
                self.rect.y += int(self.velocity)

        if dead is False:
            # handle flapping
            if pygame.mouse.get_pressed()[0] == 1 and self.clicked is False:
                self.clicked = True
                self.velocity = -10

            # only being able to flap once the mouse has been released
            if pygame.mouse.get_pressed()[0] == 0:
                self.clicked = False

            self.counter += 1
            flap_cool_down = 5

            if self.counter > flap_cool_down:
                self.counter = 0
                self.index += 1
                if self.index >= len(self.images):
                    self.index = 0
            self.image = self.images[self.index]

            # rotate the bird
            self.image = pygame.transform.rotate(self.images[self.index], -2 * self.velocity)
        else:
            # the bird faces the ground
            self.image = pygame.transform.rotate(self.images[self.index], -90)

        # Record game data
        if game_started and not dead:
            bird_data = {
                'x': self.rect.x,
                'y': self.rect.y,
                'clicked': self.clicked,
                'dead': dead
            }
            game_data.append(bird_data)


class Pipe(pygame.sprite.Sprite):
    def __init__(self, x, y, position):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('img/pipe.png')
        self.rect = self.image.get_rect()

        # position 1 is from the top, -1 is from the bottom
        if position == 1:
            self.image = pygame.transform.flip(self.image, False, True)
            self.rect.bottomleft = [x, y - int(pipe_gap / 2)]
        if position == -1:
            self.rect.topleft = [x, y + int(pipe_gap / 2)]

    def update(self):
        global game_data

        self.rect.x -= scroll_speed
        if self.rect.right < 0:
            self.kill()

        # Record game data
        if game_started and not dead:
            pipe_data = {
                'x': self.rect.x,
                'y': self.rect.y
            }
            game_data.append(pipe_data)


class Button():
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

    def draw(self):
        action = False
        # get mouse position
        position = pygame.mouse.get_pos()

        # check if mouse is over the button
        if self.rect.collidepoint(position):
            if pygame.mouse.get_pressed()[0] == 1:
                action = True

        # draw restart button
        screen.blit(self.image, (self.rect.x, self.rect.y))

        return action


# bird group keeps track of all the sprites added to it
bird_group = pygame.sprite.Group()

# pipe group keeps track of all the pipes added
pipe_group = pygame.sprite.Group()

flappy = Bird(100, int(screen_height / 2))

bird_group.add(flappy)

# create restart button instance
button = Button(screen_width // 2 - 60, screen_height // 2 + 350, button_img)

# game starts running, while not interrupted
run = True

# Flag to indicate if the game has started
game_started = False  
while run:
    clock.tick(fps)

    # in pygame we use blit to display images
    screen.blit(background_img, (0, 0))

    # draw bird
    bird_group.draw(screen)
    bird_group.update()

    # draw pipes
    pipe_group.draw(screen)

    # create the ground to be scrollable
    screen.blit(ground_img, (scroll_ground, 768))

    # check the score
    if len(pipe_group) > 0:
        if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.left \
                and bird_group.sprites()[0].rect.right < pipe_group.sprites()[0].rect.right \
                and pass_pipe is False:
            pass_pipe = True
        if pass_pipe is True:
            if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.right:
                score += 1
                pass_pipe = False

    draw_text(str(score), font, white, int(screen_width / 2), 25)

    # check if the bird has hit a pipe
    if pygame.sprite.groupcollide(bird_group, pipe_group, False, False) or flappy.rect.top < 0:
        dead = True
        game_started = False

    # check if the bird has hit the ground
    if flappy.rect.bottom >= 768:
        dead = True
        game_started = False
        flying = False

    # game is running
    if dead is False and flying is True:

        # generate new pipes
        time_now = pygame.time.get_ticks()
        if time_now - last_pipe > pipe_frequency:
            pipe_height = random.randint(-100, 100)
            bottom_pipe = Pipe(screen_width, int(screen_height / 2) + pipe_height, -1)
            top_pipe = Pipe(screen_width, int(screen_height / 2) + pipe_height, 1)
            pipe_group.add(bottom_pipe)
            pipe_group.add(top_pipe)
            last_pipe = time_now

        scroll_ground -= scroll_speed
        # once it exceeds the screen width, restart image position
        if abs(scroll_ground) > 35:
            scroll_ground = 0

        pipe_group.update()
    
    if game_started and not dead:
        # Record game data
        game_data.append({
            'bird': {
                'y': flappy.rect.y,
                'clicked': flappy.clicked,
                'dead': dead,
                'score': score
            },
            'pipes': [{
                'x': pipe.rect.x,
                'y': pipe.rect.y
            } for pipe in pipe_group]
        })

    # check if game over and reset
    if dead is True:
        if button.draw() is True:
            dead = False
            # Stop recording data if the bird is dead
            game_started = False
            score = reset_game()


    # key event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.MOUSEBUTTONDOWN and not game_started and not dead:
            game_started = True
            flying = True
            flappy.clicked = True

    # nothing gets displayed unless we update the screen
    pygame.display.update()

pygame.quit()

# Save game data to a file
import json

with open('game_data.json', 'w') as file:
    json.dump(game_data, file)

print("Game data saved successfully!")
