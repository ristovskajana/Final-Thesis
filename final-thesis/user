import pygame
import random
import numpy as np
import json

pygame.init()

clock = pygame.time.Clock()
fps = 60

screen_width = 864
screen_height = 936

screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Flappy Bird')

background_img = pygame.image.load('img/bg.png')
ground_img = pygame.image.load('img/ground.png')
button_img = pygame.image.load('img/restart.png')

num_discrete_states = 250
discretized_states = np.zeros(num_discrete_states)


combinations = []
for x in range(10):
    for y in range(25):
        combinations.append((x, y))

integer_array = list(range(250))

mapping = dict(zip(combinations, integer_array))


def draw_text(text, font, color, x, y):
    img = font.render(text, True, color)
    screen.blit(img, (x, y))

def reset_game():
    pipe_group.empty()
    flappy.rect.x = 100
    flappy.rect.y = int(screen_height/2)
    score = 0
    flappy.clicked = False
    flappy.last_state = None
    flappy.last_horizontal = None
    flappy.last_vertical = None
    flappy.state = None
    game_data.clear()  # Clear game data when resetting the game
    
    return score

def discretize_horizontal(value):
    bins1 = np.linspace(0, 400, 7)
    bins2 = np.linspace(401, 790, 3)
    if value <= 400:
        discretized_value = np.digitize(value, bins1)
    else:
        if np.digitize(value, bins2) == 1:
            discretized_value = 7
        if np.digitize(value, bins2) == 2:
            discretized_value = 8
        if np.digitize(value, bins2) == 3:
            discretized_value = 9
    return discretized_value # Subtract 1 to convert bin index to range 0-8


def discretize_vertical(value):
    bins = np.linspace(0, 1200, 25)  # Shift the bins to positive range
    shifted_value = value + 600  # Shift the value to positive range
    discretized_value = np.digitize(shifted_value, bins)
    return discretized_value -1 

font = pygame.font.SysFont('Bauhaus 93', 60)
white = (255, 255, 255)
scroll_ground = 0
scroll_speed = 4
flying = False
dead = False
pipe_gap = 170
pipe_frequency = 1500
last_pipe = pygame.time.get_ticks() - pipe_frequency
score = 0
pass_pipe = False

# Game data list
game_data = []

class Bird(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        self.index = 0
        self.counter = 0
        for num in range(1, 4):
            bird_img = pygame.image.load(f'img/bird{num}.png')
            self.images.append(bird_img)
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]

        # add gravity
        self.velocity = 0
        self.clicked = False
        self.clicked_time = 0

        self.state = None
        # Initialize state
        self.last_state = None
        self.action = None
        self.last_action = None
        self.reward = 0

        self.last_horizontal = None
        self.last_vertical = None
        self.horizontal = None
        self.vertical = None

    def update(self):
        global game_data

        if flying:
            self.velocity += 0.5
            if self.velocity > 8:
                self.velocity = 8
            if self.rect.bottom < 768:
                self.rect.y += int(self.velocity)

        if dead is False:
            # handle flapping
            if pygame.mouse.get_pressed()[0] == 1 and self.clicked is False:
                self.clicked = True
                self.velocity = -10

            # only being able to flap once the mouse has been released
            if pygame.mouse.get_pressed()[0] == 0:
                self.clicked = False

            self.counter += 1
            flap_cool_down = 5

            if self.counter > flap_cool_down:
                self.counter = 0
                self.index += 1
                if self.index >= len(self.images):
                    self.index = 0
            self.image = self.images[self.index]

            # rotate the bird
            self.image = pygame.transform.rotate(self.images[self.index], -2 * self.velocity)
        else:
            # the bird faces the ground
            self.image = pygame.transform.rotate(self.images[self.index], -90)
        
        # Update the X position of the bird
        self.rect.x = 100  # Set the desired X position here
        # Record game data
            
        
    def get_closest_lower_pipe(self):
        closest_lower_pipe = None
        closest_lower_pipe_dist = float('inf')
        for pipe in pipe_group:
            if pipe.position == 1:
                if pipe.rect.right + 35> self.rect.right:
                    distance = (pipe.rect.right + 35) - self.rect.right
                    if distance < closest_lower_pipe_dist:
                        closest_lower_pipe_dist = distance
                        closest_lower_pipe = pipe
        return closest_lower_pipe

    
    def horizontal_distance(self):
        closest_lower_pipe = self.get_closest_lower_pipe()
        if closest_lower_pipe is not None:
            x_distance = self.rect.right
            distance = (closest_lower_pipe.rect.right - x_distance) + 35
            return distance
        else:
            return float('inf')


    def vertical_distance(self):
        closest_lower_pipe = self.get_closest_lower_pipe()
        if closest_lower_pipe is not None:
            y_distance = self.rect.bottom
            distance = (closest_lower_pipe.rect.bottom + pipe_gap) - y_distance
            return distance
        else:
            return float('inf')
        
    def update_state(self):
        horizontal_distance = self.horizontal_distance()
        vertical_distance = self.vertical_distance()

        discrete_horizontal_distance = discretize_horizontal(horizontal_distance)
        discrete_vertical_distance = discretize_vertical(vertical_distance)

        self.state = mapping[(discrete_horizontal_distance, discrete_vertical_distance)]
        return (horizontal_distance, vertical_distance)


class Pipe(pygame.sprite.Sprite):
    def __init__(self, x, y, position):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('img/pipe.png')
        self.rect = self.image.get_rect()
        self.position = position  

        if position == 1:
            self.image = pygame.transform.flip(self.image, False, True)
            self.rect.bottomleft = [x, y - int(pipe_gap / 2)]
        if position == -1:
            self.rect.topleft = [x, y + int(pipe_gap / 2)]

    def update(self):
        self.rect.x -= scroll_speed
        if self.rect.right < 0:
            self.kill()


class Button():
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

    def draw(self):
        action = False
        position = pygame.mouse.get_pos()

        if self.rect.collidepoint(position):
            if pygame.mouse.get_pressed()[0] == 1:
                action = True

        screen.blit(self.image, (self.rect.x, self.rect.y))

        return action

bird_group = pygame.sprite.Group()

pipe_group = pygame.sprite.Group()

flappy = Bird(100, int(screen_height / 2))

bird_group.add(flappy)

button = Button(screen_width // 2 - 60, screen_height // 2 + 350, button_img)

run = True

game_started = False
game_ended = False

game_session = 1

while run:
    clock.tick(fps)

    screen.blit(background_img, (0, 0))

    bird_group.draw(screen)

    pipe_group.draw(screen)

    screen.blit(ground_img, (scroll_ground, 768))

    if len(pipe_group) > 0:
        if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.left \
                and bird_group.sprites()[0].rect.right < pipe_group.sprites()[0].rect.right \
                and pass_pipe is False:
            pass_pipe = True
        if pass_pipe is True:
            if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.right:
                score += 1
                pass_pipe = False
    draw_text(str(score), font, white, int(screen_width / 2), 25)


    if pygame.sprite.groupcollide(bird_group, pipe_group, False, False) or flappy.rect.top < 0 :
        dead = True
        flying = False  
        next_state = None
        game_started = False

    if flappy.rect.bottom >= 768:
        dead = True
        flying = False
        next_state = None
        game_started = False

    if dead is False and flying is True:
        time_now = pygame.time.get_ticks()
        if time_now - last_pipe > pipe_frequency:
            pipe_height = random.randint(-100, 100)
            bottom_pipe = Pipe(screen_width, int(screen_height / 2) + pipe_height, -1)
            top_pipe = Pipe(screen_width, int(screen_height / 2) + pipe_height, 1)
            pipe_group.add(bottom_pipe)
            pipe_group.add(top_pipe)
            last_pipe = time_now

        scroll_ground -= scroll_speed
        if abs(scroll_ground) > 35:
            scroll_ground = 0

        pipe_group.update()

        if flappy.last_state == None and game_data:
            if flappy.clicked:
                flappy.action = 1
                flappy.clicked = 0
            else:
                flappy.action = 0

            flappy.update()
            distances = flappy.update_state()
            flappy.horizontal = distances[0]
            flappy.vertical = distances[1]
            flappy.last_state = flappy.state
        else:
            if dead == False and game_started == True:
                flappy.last_state = flappy.state
                flappy.last_horizontal = flappy.horizontal
                flappy.last_vertical = flappy.vertical

                if flappy.clicked:
                    flappy.action = 1
                    flappy.clicked = 0
                else:
                    flappy.action = 0
                flappy.update()
                distances = flappy.update_state()
                flappy.horizontal = distances[0]
                flappy.vertical = distances[1]
                flappy.reward = 10
                next_state = flappy.state  # Update next state

                bird_data = {
                    'Current horizontal': flappy.last_horizontal,
                    'Current vertical': flappy.last_vertical,
                    'Action' : flappy.action,
                    'Reward' : flappy.reward,
                    'Next horizontal' : flappy.horizontal,
                    'Next vertical' : flappy.vertical,
                    'Score': score
                }
                game_data.append(bird_data)


    if dead == True:
        next_state = None
        flappy.horizontal = None
        flappy.vertical = None
        flappy.reward = -1000
        next_state = None # Update next state
        if game_ended == False: 
            bird_data = {
                'Current horizontal': flappy.last_horizontal,
                'Current vertical': flappy.last_vertical,
                'Action' : flappy.action,
                'Reward' : flappy.reward,
                'Next horizontal' : flappy.horizontal,
                'Next vertical' : flappy.vertical,
                'Score': score
            }
            game_data.append(bird_data)
            game_ended = True

        if button.draw() is True:
            dead = False
            flying = False
            # Stop recording data if the bird is dead
            game_started = False
            game_ended = False
            time_now = pygame.time.get_ticks()
            last_pipe = time_now - 2000
            # Save game data to a file
            with open(f'game_data_{game_session}.json', 'w') as file:
                json.dump(game_data, file)
                    
            print(f"Game data for game session {game_session} saved successfully!")
            score = reset_game()

            game_session += 1

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.MOUSEBUTTONDOWN and not game_started and not dead:
            game_started = True
            flying = True
            flappy.clicked = True

    pygame.display.update()

pygame.quit()
